<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.1.1">
  <zoom_level>4</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>520</x>
      <y>40</y>
      <w>124</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>/GameEntity/
--
_#id: ssize_t = FREE_ID_
#own_id: ssize_t
#to_delete: bool
#manager: TagManager*
--
+GameEntity(id: const ssize_t&amp;)
/+~GameEntity()/
+id(): ssize_t const
+to_delete(): bool const
+manager(): TagManager*
+set_manager(manager: TagManager*): size_t
/+what(): std::string const/
/+short_what(): std::string const/
/+update(): size_t/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>348</x>
      <y>184</y>
      <w>88</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>/GameObject/
--
#name: std::string
#description: std::string
--
+GameObject(id: const ssize_t&amp;)
/+~GameObject()/
+name(): std::string const
+description(): std::string const</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>520</x>
      <y>0</y>
      <w>80</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>FREE_ID: const ssize_t = -1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>552</x>
      <y>8</y>
      <w>52</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=-
used to initialize 
_id static field
        v</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>388</x>
      <y>136</y>
      <w>208</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>500.0;10.0;500.0;70.0;10.0;70.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>164</x>
      <y>280</y>
      <w>168</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>/LevelableObject/
--
#level: ssize_t

#increase_level(shift: const ssize_t&amp;): size_t
#decrease_level(shift: const ssize_t&amp;): size_t
/#level_up(): size_t/
--
+LevelableObject(id: const ssize_t&amp;, level: const size_t&amp;)
/+~LevelableObject()/
+level(): ssize_t const
+set_level(level: const ssize_t&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>240</x>
      <y>236</y>
      <w>160</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>380.0;10.0;380.0;60.0;10.0;60.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>352</x>
      <y>280</y>
      <w>120</w>
      <h>148</h>
    </coordinates>
    <panel_attributes>ItemPart
--
#kind: size_t
#group: size_t
#place: size_t
#rarity: size_t
#cost: std::vector&lt;size_t&gt;
#bonuses: std::vector&lt;ssize_t&gt;
--
+ItemPart(data: ItemPartTemplate&amp;)
/+~ItemPart()/
+kind(): size_t const
+group(): size_t const
+place(): size_t const
+rarity(): size_t const
+cost(index: const size_t&amp;): size_t const
+cost(): std::vector&lt;size_t&gt; const
+bonuses(index: const size_t&amp;): ssize_t const
+bonuses(): std::vector&lt;ssize_t&gt; const
+what(): std::string const
+short_what(): std::string const
+upadte(): size_t
+save_data(): ItemPartTemplate const
+dispose(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>388</x>
      <y>256</y>
      <w>36</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>70.0;60.0;70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>540</x>
      <y>280</y>
      <w>120</w>
      <h>116</h>
    </coordinates>
    <panel_attributes>Item
--
#kind: size_t
#parts: std::vector&lt;ItemPart*&gt;
--
+Item(data: const ItemTemplate&amp;)
/+~Item()/
+kind(): size_t
+bonuses(index: const size_t&amp;): ssize_t const
+bonuses(): std::vector&lt;ssize_t&gt; const
+cost(index: const size_t&amp;): size_t const
+cost(): std::vector&lt;size_t&gt; const
+part(index: const size_t&amp;): ItemPart* const
+rarity(): size_t const
+what(): std::string const
+short_what(): std::string const
+update(): size_t
+save_data(): ItemTemplate const
+dispose(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>412</x>
      <y>256</y>
      <w>196</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>470.0;60.0;470.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>468</x>
      <y>328</y>
      <w>80</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=3</panel_attributes>
    <additional_attributes>180.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>164</x>
      <y>380</y>
      <w>168</w>
      <h>212</h>
    </coordinates>
    <panel_attributes>GameCharacter
--
#stat_points: ssize_t
#wounds: size_t
#gender: bool
#experience: std::vector&lt;size_t&gt;
#stats: std::vector&lt;ssize_t&gt;

#level_up(): size_t
--
+GameCharacter(data: const GameCharacterTemplate&amp;)
/+~GameCharacter()/
+stat_points(): ssize_t const
+wounds(): size_t const
+wounds_cap(): size_t const
+add_wounds(amount: const size_t&amp;): size_t
+remove_wounds(amount: const size_t&amp;): size_t
+gender(): bool const
+melee_skill(): ssize_t const
+ranged_skill(): ssize_t const
+defense(): ssize_t const
+experience(): std::vector&lt;size_t&gt; const
+experience(index: const size_t&amp;): size_t const
+stats(): std::vector&lt;ssize_t&gt; const
+stats(index: const size_t&amp;): ssize_t const
+what(): std::string const
+short_what(): std::string const
+talk(): std::string const
+upadate(): size_t
+save_data(): GameCharacterTemplate const
+increase_stat(index: const size_t&amp;, shift: const ssize_t&amp;): size_t
+decrease_stat(index: const size_t&amp;, shift: const ssize_t&amp;): size_t
+equip(item: Item*&amp;): size_t
+dequip(index: const size_t&amp;): Item*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>244</x>
      <y>348</y>
      <w>12</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>720</x>
      <y>280</y>
      <w>232</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>Inventory
--
-items: std::vector&lt;Item*&gt;
--
+Inventory(data: const InventoryTemplate&amp;, item_pool: const std::vector&lt;GameObject*&gt;&amp;)
/+~Inventory()/
+bonuses(): std::vector&lt;ssize_t&gt; const
+bonuses(index: const size_t&amp;): ssize_t
+equip(item: Item*&amp;): size_t
+unequip(index: const size_t&amp;): Item*
+save_data(): InventoryTemplate const
+what(): std::string const
+short_what(): std::string const
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>584</x>
      <y>160</y>
      <w>260</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;630.0;10.0;630.0;300.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>656</x>
      <y>324</y>
      <w>72</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=7</panel_attributes>
    <additional_attributes>160.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>328</x>
      <y>360</y>
      <w>520</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;310.0;1280.0;310.0;1280.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>300</x>
      <y>708</y>
      <w>216</w>
      <h>176</h>
    </coordinates>
    <panel_attributes>World
--
-characters_pool: std::vector&lt;GameCharacter*&gt;
-items_pool: std::vector&lt;GameObject*&gt;
-storage: WorldStorage

-cleanup(): size_t
-save_data(): size_t const
--
+World()
+~World()
+fill(templates_db_name: const std::string&amp;, ui_db_name: const std::string&amp;): size_t
+new_game(player_name: const std::string&amp;): size_t
+load_game(fname: const std::string&amp;): size_t
+save_game(fname: const std::string&amp;): size_t
+update(): size_t
+character_what(index: const size_t&amp;): std::string const
+character_what(id: const ssize_t&amp;): std::string const
+character_short__what(index: const size_t&amp;): std::string const
+character_short_what(id: const ssize_t&amp;): std::string const
+item_what(index: const size_t&amp;): std::string const
+item_what(id: const ssize_t&amp;): std::string const
+item_short__what(index: const size_t&amp;): std::string const
+item_short_what(id: const ssize_t&amp;): std::string const
+item_part_what(index: const size_t&amp;): std::string const
+item_part_what(id: const ssize_t&amp;): std::string const
+item_part_short_what(index: const size_t&amp;): std::string const
+item_part_short_what(id: const ssize_t&amp;): std::string const</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>248</x>
      <y>588</y>
      <w>20</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=-
m2=0..*</panel_attributes>
    <additional_attributes>10.0;180.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>248</x>
      <y>424</y>
      <w>176</w>
      <h>244</h>
    </coordinates>
    <panel_attributes>lt=-
m2=0..*</panel_attributes>
    <additional_attributes>10.0;590.0;400.0;590.0;400.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>404</x>
      <y>392</y>
      <w>216</w>
      <h>276</h>
    </coordinates>
    <panel_attributes>lt=-
m2=0..*</panel_attributes>
    <additional_attributes>10.0;670.0;500.0;670.0;500.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>404</x>
      <y>656</y>
      <w>52</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1
           ^
creates, deletes 
         and 
handles actions</panel_attributes>
    <additional_attributes>10.0;130.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>400</x>
      <y>880</y>
      <w>12</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>180</x>
      <y>928</y>
      <w>448</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>WorldStorage
--
-templates: TemplateStorage
-ui_dictionary: UITextStorage
-managers: std::vector&lt;TagManager&gt;

-fill_managers(): size_t
--
+WorldStorage()
+WorldStorage(templates_db_name: const std::string&amp;, ui_db_name: const std::string&amp;)
+~WorldStorage()
+is_filled(): bool const
+fill(templates_db_name: const std::string&amp;, ui_db_name: const std::string&amp;): size_t
+clear(): size_t
+make_character(result: GameCharacter*&amp;, level: const ssize_t&amp;): size_t const
+make_character(result: GameCharacter*&amp;, data: const GameCharacterTemplate&amp;): size_t const
+make_item_part(result: ItemPart*&amp;, index: const size_t&amp;): size_t const
+make_item_part(result: ItemPart*&amp;, data: const ItemPartTemplate&amp;): size_t const
+make_battle(result: Battle*&amp;, character_pool: const std::vector&lt;GameCharacter*&gt;, viking_ids: const std::vector&lt;ssize_t&gt;&amp;, enemy_ids: const std::vector&lt;ssize_t&gt;&amp;): size_t const
+dictionary(): UITextStorage* const
+manager(index: const size_t&amp;): TagManager* const</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
