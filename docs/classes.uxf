<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.1.1">
  <zoom_level>2</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>804</x>
      <y>64</y>
      <w>62</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>/GameEntity/
bg=green
--
_#id: ssize_t = FREE_ID_
#own_id: ssize_t
#to_delete: bool
#manager: TagManager*
--
+GameEntity(id: const ssize_t&amp;)
/+~GameEntity()/
+id(): ssize_t const
+to_delete(): bool const
+manager(): TagManager*
+set_manager(manager: TagManager*): size_t
/+what(): std::string const/
/+short_what(): std::string const/
/+update(): size_t/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>718</x>
      <y>136</y>
      <w>44</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>/GameObject/
bg=green
--
#name: std::string
#description: std::string
--
+GameObject(id: const ssize_t&amp;)
/+~GameObject()/
+name(): std::string const
+description(): std::string const</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>804</x>
      <y>44</y>
      <w>40</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>FREE_ID: const ssize_t = -1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>820</x>
      <y>48</y>
      <w>26</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=-
used to initialize 
_id static field
        v</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>738</x>
      <y>112</y>
      <w>104</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>500.0;10.0;500.0;70.0;10.0;70.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>626</x>
      <y>184</y>
      <w>84</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>/LevelableObject/
bg=green
--
#level: ssize_t

#increase_level(shift: const ssize_t&amp;): size_t
#decrease_level(shift: const ssize_t&amp;): size_t
/#level_up(): size_t/
--
+LevelableObject(id: const ssize_t&amp;, level: const size_t&amp;)
/+~LevelableObject()/
+level(): ssize_t const
+set_level(level: const ssize_t&amp;): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>664</x>
      <y>162</y>
      <w>80</w>
      <h>26</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>380.0;10.0;380.0;60.0;10.0;60.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>720</x>
      <y>184</y>
      <w>60</w>
      <h>74</h>
    </coordinates>
    <panel_attributes>ItemPart
bg=cyan
--
#kind: size_t
#group: size_t
#place: size_t
#rarity: size_t
#cost: std::vector&lt;size_t&gt;
#bonuses: std::vector&lt;ssize_t&gt;
--
+ItemPart(data: ItemPartTemplate&amp;)
/+~ItemPart()/
+kind(): size_t const
+group(): size_t const
+place(): size_t const
+rarity(): size_t const
+cost(index: const size_t&amp;): size_t const
+cost(): std::vector&lt;size_t&gt; const
+bonuses(index: const size_t&amp;): ssize_t const
+bonuses(): std::vector&lt;ssize_t&gt; const
+what(): std::string const
+short_what(): std::string const
+upadte(): size_t
+save_data(): ItemPartTemplate const
+dispose(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>738</x>
      <y>172</y>
      <w>18</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>70.0;60.0;70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>814</x>
      <y>184</y>
      <w>60</w>
      <h>58</h>
    </coordinates>
    <panel_attributes>Item
bg=cyan
--
#kind: size_t
#parts: std::vector&lt;ItemPart*&gt;
--
+Item(data: const ItemTemplate&amp;)
/+~Item()/
+kind(): size_t
+bonuses(index: const size_t&amp;): ssize_t const
+bonuses(): std::vector&lt;ssize_t&gt; const
+cost(index: const size_t&amp;): size_t const
+cost(): std::vector&lt;size_t&gt; const
+part(index: const size_t&amp;): ItemPart* const
+rarity(): size_t const
+what(): std::string const
+short_what(): std::string const
+update(): size_t
+save_data(): ItemTemplate const
+dispose(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>750</x>
      <y>172</y>
      <w>98</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>470.0;60.0;470.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>778</x>
      <y>208</y>
      <w>40</w>
      <h>8</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=3</panel_attributes>
    <additional_attributes>180.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>626</x>
      <y>234</y>
      <w>84</w>
      <h>106</h>
    </coordinates>
    <panel_attributes>GameCharacter
bg=green
--
#stat_points: ssize_t
#wounds: size_t
#gender: bool
#experience: std::vector&lt;size_t&gt;
#stats: std::vector&lt;ssize_t&gt;

#level_up(): size_t
--
+GameCharacter(data: const GameCharacterTemplate&amp;)
/+~GameCharacter()/
+stat_points(): ssize_t const
+wounds(): size_t const
+wounds_cap(): size_t const
+add_wounds(amount: const size_t&amp;): size_t
+remove_wounds(amount: const size_t&amp;): size_t
+gender(): bool const
+melee_skill(): ssize_t const
+ranged_skill(): ssize_t const
+defense(): ssize_t const
+experience(): std::vector&lt;size_t&gt; const
+experience(index: const size_t&amp;): size_t const
+stats(): std::vector&lt;ssize_t&gt; const
+stats(index: const size_t&amp;): ssize_t const
+what(): std::string const
+short_what(): std::string const
+talk(): std::string const
+upadate(): size_t
+save_data(): GameCharacterTemplate const
+increase_stat(index: const size_t&amp;, shift: const ssize_t&amp;): size_t
+decrease_stat(index: const size_t&amp;, shift: const ssize_t&amp;): size_t
+equip(item: Item*&amp;): size_t
+dequip(index: const size_t&amp;): Item*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>666</x>
      <y>218</y>
      <w>6</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>904</x>
      <y>184</y>
      <w>116</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>Inventory
bg=cyan
--
-items: std::vector&lt;Item*&gt;
--
+Inventory(data: const InventoryTemplate&amp;, item_pool: const std::vector&lt;GameObject*&gt;&amp;)
/+~Inventory()/
+bonuses(): std::vector&lt;ssize_t&gt; const
+bonuses(index: const size_t&amp;): ssize_t
+equip(item: Item*&amp;): size_t
+unequip(index: const size_t&amp;): Item*
+save_data(): InventoryTemplate const
+what(): std::string const
+short_what(): std::string const
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>836</x>
      <y>124</y>
      <w>130</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;630.0;10.0;630.0;300.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>872</x>
      <y>206</y>
      <w>36</w>
      <h>8</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=7</panel_attributes>
    <additional_attributes>160.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>708</x>
      <y>224</y>
      <w>260</w>
      <h>68</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;310.0;1280.0;310.0;1280.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>694</x>
      <y>398</y>
      <w>108</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>World
bg=yellow
--
-characters_pool: std::vector&lt;GameCharacter*&gt;
-items_pool: std::vector&lt;GameObject*&gt;
-storage: WorldStorage

-cleanup(): size_t
-save_data(): size_t const
--
+World()
+~World()
+fill(templates_db_name: const std::string&amp;, ui_db_name: const std::string&amp;): size_t
+new_game(player_name: const std::string&amp;): size_t
+load_game(fname: const std::string&amp;): size_t
+save_game(fname: const std::string&amp;): size_t
+update(): size_t
+character_what(index: const size_t&amp;): std::string const
+character_what(id: const ssize_t&amp;): std::string const
+character_short__what(index: const size_t&amp;): std::string const
+character_short_what(id: const ssize_t&amp;): std::string const
+item_what(index: const size_t&amp;): std::string const
+item_what(id: const ssize_t&amp;): std::string const
+item_short__what(index: const size_t&amp;): std::string const
+item_short_what(id: const ssize_t&amp;): std::string const
+item_part_what(index: const size_t&amp;): std::string const
+item_part_what(id: const ssize_t&amp;): std::string const
+item_part_short_what(index: const size_t&amp;): std::string const
+item_part_short_what(id: const ssize_t&amp;): std::string const</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>668</x>
      <y>338</y>
      <w>10</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=-
m2=0..*</panel_attributes>
    <additional_attributes>10.0;180.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>668</x>
      <y>256</y>
      <w>88</w>
      <h>122</h>
    </coordinates>
    <panel_attributes>lt=-
m2=0..*</panel_attributes>
    <additional_attributes>10.0;590.0;400.0;590.0;400.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>746</x>
      <y>240</y>
      <w>108</w>
      <h>138</h>
    </coordinates>
    <panel_attributes>lt=-
m2=0..*</panel_attributes>
    <additional_attributes>10.0;670.0;500.0;670.0;500.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>746</x>
      <y>372</y>
      <w>26</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1
           ^
creates, deletes 
         and 
handles actions</panel_attributes>
    <additional_attributes>10.0;130.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>744</x>
      <y>484</y>
      <w>78</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1
provides new and loaded game objects instantiation ^
provide game objects with corresponding tag managers ^</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>632</x>
      <y>508</y>
      <w>226</w>
      <h>76</h>
    </coordinates>
    <panel_attributes>WorldStorage
bg=green
--
-templates: TemplateStorage
-ui_dictionary: UITextStorage
-managers: std::vector&lt;TagManager&gt;

-fill_managers(): size_t
--
+WorldStorage()
+WorldStorage(templates_db_name: const std::string&amp;, ui_db_name: const std::string&amp;)
+~WorldStorage()
+is_filled(): bool const
+fill(templates_db_name: const std::string&amp;, ui_db_name: const std::string&amp;): size_t
+clear(): size_t
+make_character(result: GameCharacter*&amp;, level: const ssize_t&amp;): size_t const
+make_character(result: GameCharacter*&amp;, data: const GameCharacterTemplate&amp;): size_t const
+make_item_part(result: ItemPart*&amp;, index: const size_t&amp;): size_t const
+make_item_part(result: ItemPart*&amp;, kind: const size_t&amp;, place: const size_t&amp;, { group: const size_t&amp; }): size_t const
+make_item_part(result: ItemPart*&amp;, data: const ItemPartTemplate&amp;): size_t const
+make_item(result: Item*&amp;, blueprint_id: const size_t&amp;, items_pool: std::vector&lt;GameObject*&gt;&amp;): size_t const
+make_item(result: Item*&amp;, data: const ItemTemplate&amp;, items_pool
+make_battle(result: Battle*&amp;, character_pool: const std::vector&lt;GameCharacter*&gt;, viking_ids: const std::vector&lt;ssize_t&gt;&amp;, enemy_ids: const std::vector&lt;ssize_t&gt;&amp;): size_t const
+dictionary(): UITextStorage* const
+manager(index: const size_t&amp;): TagManager* const</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>156</x>
      <y>590</y>
      <w>100</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>/BaseStorage/
bg=green
--
#open_connection(db_name: const std::string&amp;, sqlite3*&amp; connection): ssize_t
#close_connection(sqlite3*&amp; connection): ssize_t
--
+BaseStorage()
/+~BaseStorage()/
/+fill_storage(db_name: const std::string&amp;): size_t/
/+clear_storage(): size_t/
/+is_filled(): bool const/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>320</x>
      <y>672</y>
      <w>148</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>TemplateStorage
bg=green
--
-male_nameparts_begin: std::vector&lt;std::string&gt;
-male_nameparts_end: std::vector&lt;std::string&gt;
-female_nameparts_begin: std::vector&lt;std::string&gt;
-female_nameparts_end: std::vector&lt;std::string&gt;
-item_part_templates: std::vector&lt;ItemPartTemplate&gt;
-item_blueprints: std::vector&lt;std::vector&lt;ssize_t&gt; &gt;
-surname_suffixes: std::vector&lt;std::string&gt;

-read_male_names(connection: sqlite3*&amp;): ssize_t
-read_female_names(connection: sqlite3*&amp;): ssize_t
-read_surname_suffixes(connection: sqlite3*&amp;): ssize_t
-read_item_part_generals(connection: sqlite3*&amp;): ssize_t
-read_item_part_bonuses(connection: sqlte3*&amp;): ssize_t
-read_item_part_costs(connection: sqlite3*&amp;): ssize_t
-read_item_parts(connection: sqlite3*&amp;): ssize_t
-read_item_blueprints(connection: sqlite3*&amp;): ssize_t
-male_name(): std::string const
-female_name(): std::string const
-surname(): std::string const
--
+TemplateStorage()
/+~TemplateStorage()/
+fill_storage(db_name: const std::string&amp;): size_t
+clear_storage(): size_t
+is_filled(): bool const
+make_character_template(level: const ssize_t&amp;): GameCharacterTemplate const
+make_character_template(gender: const bool&amp;, level: const ssize_t&amp;): GameCharacterTemplate const
+make_item_part_template(group: const size_t&amp;, place: const size_t&amp;, rarity: const size_t&amp;): ItemPartTemplate const
+make_item_blueprint(index: const size_t&amp;): std::vector&lt;ssize_t&gt; const</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>320</x>
      <y>440</y>
      <w>150</w>
      <h>198</h>
    </coordinates>
    <panel_attributes>UITextStorage
bg=green
--
-character_field_names: std::vector&lt;std::string&gt;
-stat_names: std::vector&lt;std::string&gt;
-gender_names: std::vector&lt;std::string&gt;
-character_manager_tags: std::vector&lt;std::string&gt;
-inv_item_manager_tags: std::vector&lt;std::string&gt;
-battle_manager_tags: std::vector&lt;std::string&gt;
-ui_manager_tags: std::vector&lt;std::string&gt;
-melee_attack_attempts: std::vector&lt;std::string&gt;
-ranged_attack_attempts: std::vector&lt;std::string&gt;
-melee_attack_success: std::vector&lt;std::string&gt;
-ranged_attack_success: std::vector&lt;std::string&gt;
-melee_attack_failure: std::vector&lt;std::string&gt;
-ranged_attack_failure: std::vector&lt;std::string&gt;
-wound_made: std::vector&lt;std::string&gt;
-wound_avoid: std::vector&lt;std::string&gt;

-read_character_field_names(connection: sqlite3*&amp;): ssize_t
-read_stat_names(connection: sqlite3*&amp;): ssize_t
-read_gender_names(connection: sqlite3*&amp;): ssize_t
-read_character_tags(connection: sqlite3*&amp;): ssize_t
-read_inv_item_tags(connection: sqlite3*&amp;): ssize_t
-read_battle_tags(connection: sqlite3*&amp;): ssize_t
-read_ui_tags(connection: sqlite3*&amp;): ssize_t
-read_manager_tags(connection: sqlite3*&amp;): ssize_t
-read_battle_log_parts(connection: sqlite3*&amp;): ssize_t
--
+UITextStorage()
/+~UITextStorage()/
+fill_storage(db_name: const std::string&amp;): size_t
+clear_storage(): size_t
+is_filled(): bool const
+character_field_names_count(): size_t const
+character_field_name(index: const size_t&amp;): std::string const
+stat_names_count(): size_t const
+stat_name(index: const size_t&amp;): std::string const
+gender_names_count(): size_t const
+gender_name(index: const size_t&amp;): std::string const
+character_tags_count(): size_t const
+character_tag(index: const size_t&amp;): std::string const
+inv_item_tags_count(): size_t const
+inv_item_tag(index: const size_t&amp;): std::string const
+battle_tags_count(): size_t const
+battle_tag(index: const size_t&amp;): std::string const
+melee_attempts_count(): size_t const
+melee_attempt(index: const size_t&amp;): std::string const
+ranged_attempts_count(): size_t const
+ranged_attempt(index: const size_t&amp;): std::string const
+melee_success_count(): size_t const
+melee_success(index: const size_t&amp;): std::string const
+ranged_success_count(): size_t const
+ranged_success(index: const size_t&amp;): std::string const
+melee_failures_count(): size_t const
+melee_failure(index: const size_t&amp;): std::string const
+ranged_failures_count(): size_t const
+ranged_failure(index: const size_t&amp;): std::string const
+wound_made_count(): size_t const
+wound_made(index: const size_t&amp;): std::string const
+wound_avoid_count(): size_t const
+wound_avoid(index: const size_t&amp;): std::string const
+clear_manager_tags(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>254</x>
      <y>530</y>
      <w>70</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;370.0;110.0;370.0;110.0;10.0;330.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>274</x>
      <y>602</y>
      <w>50</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;620.0;230.0;620.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>466</x>
      <y>518</y>
      <w>66</w>
      <h>214</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1
m2=1</panel_attributes>
    <additional_attributes>20.0;10.0;310.0;10.0;310.0;1040.0;10.0;1040.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>526</x>
      <y>550</y>
      <w>110</w>
      <h>8</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1</panel_attributes>
    <additional_attributes>530.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>0</x>
      <y>588</y>
      <w>68</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>Sqlite3
--
library to work with SQLite databases</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>66</x>
      <y>602</y>
      <w>94</w>
      <h>8</h>
    </coordinates>
    <panel_attributes>lt=-
provides interface to work with databases &gt;</panel_attributes>
    <additional_attributes>10.0;20.0;450.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>140</x>
      <y>522</y>
      <w>184</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>900.0;1060.0;10.0;1060.0;10.0;10.0;900.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>48</x>
      <y>384</y>
      <w>162</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>TagManager
bg=green
--
-tag_list: std::vector&lt;std::string&gt;

-find_tag(tag_id: const size_t&amp;, start_pos: const size_t&amp;, source: const std::string&amp;): size_t const
--
+TagManager()
+TagManager(tag_list: const std::vector&lt;std::string&gt;&amp;)
+~TagManager()
+is_filled(): bool const
+tags_count(): size_t const
+tag(index: const size_t&amp;): std::string const
+has_tag(tag: const char*): bool const
+has_tag(tag: const std::string&amp;): bool const
+add_tag(new_tag: const std::string&amp;): size_t
+add_tag(new_tag: consth char*): size_t
+remove_tag(index: const size_t&amp;): size_t
+remove_tag(tag: const std::string&amp;): size_t
+clear_tags(): size_t
+get_by_tag(tag_id: const size_t&amp;, start_pos: const size_t&amp;, source: const std::string&amp;, result: std::string&amp;): size_t const
+replace_tag(tag_id: const size_t&amp;, start_pos: const size_t&amp;, source: std::string&amp;, replacement: const std::string&amp;): size_t const
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>130</x>
      <y>452</y>
      <w>194</w>
      <h>26</h>
    </coordinates>
    <panel_attributes>lt=-
          ^
    provides with
 tags from database</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0;950.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>208</x>
      <y>424</y>
      <w>324</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=-
m1=4</panel_attributes>
    <additional_attributes>10.0;10.0;1600.0;10.0;1600.0;480.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>58</x>
      <y>80</y>
      <w>750</w>
      <h>308</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1
provides what()/short_what() results with proper mark-up &gt;</panel_attributes>
    <additional_attributes>3730.0;20.0;10.0;20.0;10.0;1520.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>898</x>
      <y>446</y>
      <w>102</w>
      <h>26</h>
    </coordinates>
    <panel_attributes>Some MVC-like mid-layer here
--
Questions
--
1. Is any message processing mid-layer between GUI and World needed
2. If yes, what's better to use:
--- Two queues(one for user input messages, other for everything else)
--- Priority queue
3. There shall be some proper what()/short_what() processors
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>834</x>
      <y>502</y>
      <w>50</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>Abstract Factory pattern</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>186</x>
      <y>378</y>
      <w>34</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>Component pattern</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>864</x>
      <y>60</y>
      <w>36</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>Update method pattern</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>538</x>
      <y>184</y>
      <w>64</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Occupation
--
-consumption: std::vector&lt;size_t&gt;
--
+Occupation(data: const OccupationTemplate&amp;)
/~+Occupation()/
+consumption(): std::vector&lt;size_t&gt; const
+what(): std::string const
+short_what(): std::string const
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>566</x>
      <y>172</y>
      <w>104</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0;500.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>568</x>
      <y>212</y>
      <w>62</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>290.0;220.0;10.0;220.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>586</x>
      <y>178</y>
      <w>30</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>Type Object pattern</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>1166</x>
      <y>448</y>
      <w>68</w>
      <h>26</h>
    </coordinates>
    <panel_attributes>Urho3D
--
Cross-platform 2D/3D game engine</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>1062</x>
      <y>446</y>
      <w>72</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>MyFramework
bg=yellow
--
Simple framework providing basic app class with some
built-in features, scene manager, etc.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1132</x>
      <y>458</y>
      <w>38</w>
      <h>8</h>
    </coordinates>
    <panel_attributes>lt=-
simplifies work with &gt;</panel_attributes>
    <additional_attributes>10.0;20.0;170.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>998</x>
      <y>456</y>
      <w>68</w>
      <h>10</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; sends user input messages
receives processed World's responses &gt;</panel_attributes>
    <additional_attributes>10.0;20.0;320.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>800</x>
      <y>456</y>
      <w>102</w>
      <h>10</h>
    </coordinates>
    <panel_attributes>lt=-
&lt; receives user input and GUI requests
sends responses &gt;</panel_attributes>
    <additional_attributes>10.0;20.0;490.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>936</x>
      <y>482</y>
      <w>64</w>
      <h>14</h>
    </coordinates>
    <panel_attributes>Polymorphic messages class hierarchy there
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>912</x>
      <y>470</y>
      <w>28</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=-
if yes &gt;</panel_attributes>
    <additional_attributes>120.0;100.0;10.0;100.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>788</x>
      <y>392</y>
      <w>30</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>Facade pattern</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>454</x>
      <y>184</y>
      <w>70</w>
      <h>62</h>
    </coordinates>
    <panel_attributes>TypeBuilding
--
-item_production: std::vector&lt;size_t&gt;
-resource_production: std::vector&lt;size_t&gt;
-cost: std::string&lt;size_t&gt;
-occupations: std::vector&lt;ssize_t&gt;
-workers_cap: size_t
-inhabitants_cap: size_t
--
+TypeBuilding(data: const TypeBuildingTemplate&amp;)
+item_production(): std::vector&lt;size_t&gt; const
+resource_production(): std::vector&lt;size_t&gt; const
+cost(): std::vector&lt;size_t&gt; const
+occupations(): std::vector&lt;size_t&gt; const
+workers_cap(): size_t const
+inhabitants_cap() size_t const
+what(): std::string const
+short_what(): std::string const
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>504</x>
      <y>178</y>
      <w>30</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>Type Object pattern</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>482</x>
      <y>172</y>
      <w>90</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0;430.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>342</x>
      <y>184</y>
      <w>88</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>Building
--
#workers: std::vector&lt;GameCharacter*&gt;
#inhabitants: std::vector&lt;GameCharacter*&gt;
--
+Building(data: const BuildingTemplate&amp;, kind: const TypeBuilding&amp;)
+item_production(): std::vector&lt;size_t&gt; const
+resource_production(): std::vector&lt;size_t&gt; const
+cost(): std::vector&lt;size_t&gt; const
+occupations(): std::vector&lt;size_t&gt; const
+workers_cap(): size_t const
+workers(): std::vector&lt;GameCharacter*&gt; const
+inhabitants_cap(): size_t const
+inhabitants(): std::vector&lt;GameCharacter*&gt; const
+has_free_space(): bool const
+add_worker(worker: GameCharacter*): size_t
+remove_worker(index: const size_t&amp;): size_t
+remove_worker(id: const ssize_t&amp;): size_t
+add_inhabitant(inhabitant: GameCharacter*): size_t
+remove_inhabitant(index: const size_t&amp;): size_t
+remove_inhabitant(id: const ssize_t&amp;): size_t
+demolish(): size_t
+what(): std::string const
+short_what(): std::string const
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>428</x>
      <y>208</y>
      <w>30</w>
      <h>8</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;130.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>384</x>
      <y>172</y>
      <w>104</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0;500.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>394</x>
      <y>260</y>
      <w>236</w>
      <h>22</h>
    </coordinates>
    <panel_attributes>lt=-
m1=1
m2=0..*

               ^
lives and/or works in</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0;1160.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>384</x>
      <y>260</y>
      <w>290</w>
      <h>118</h>
    </coordinates>
    <panel_attributes>lt=-
m2=0..*</panel_attributes>
    <additional_attributes>1430.0;570.0;10.0;570.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>94</x>
      <y>184</y>
      <w>234</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>Village
--
#villagers: std::vector&lt;GameCharacter*&gt;
#items: std::vector&lt;GameObject*&gt;
#buildings: std::vector&lt;Building*&gt;
#resources: std::vector&lt;size_t&gt;
--
+Village(data: const VillageTemplate&amp;, character_pool: const std::vector&lt;GameCharacter*&gt;&amp;, item_pool: const std::vector&lt;GameObject*&gt;&amp;, buildings_pool: const std::vector&lt;Building*&gt;&amp;)
/+~Village()/
+villagers(): std::vector&lt;GameCharacter*&gt; const
+villagers(index: const size_t&amp;): GameCharacter* const
+items(): std::vector&lt;GameObject*&gt; const
+items(index: const size_t&amp;): GameObject* const
+buildings(): std::vector&lt;Building*&gt; const
+buildings(index: const size_t&amp;): Building* const
+resources(): std::vector&lt;size_t&gt; const
+resources(index: const size_t&amp;): size_t const
+save_data(): VillageTemplate const
+what(): std::string const
+short_what(): std::string const
+update(): size_t
+add_villager(villager: GameCharacter*): size_t
+remove_villager(index: const size_t&amp;): size_t
+remove_villager(id: const ssize_t&amp;): size_t
+add_item(item: GameObject*): size_t
+remove_item(index: const size_t&amp;): size_t
+remove_item(id: const ssize_t&amp;): size_t
+add_building(building: Building*): size_t
+remove_building(index: const size_t&amp;): size_t
+remove_building(id: const ssize_t&amp;): size_t
+add_resource(index: const size_t&amp;, amount: const size_t&amp;): size_t
+remove_resource(index: const size_t&amp;, amount: const size_t&amp;): size_t
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>214</x>
      <y>172</y>
      <w>176</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0;860.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1038</x>
      <y>184</y>
      <w>228</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>Battle
bg=green
--
#turn: size_t
#vikings: std::vector&lt;GameCharacter*&gt;
#enemies: std::vector&lt;GameCharacter*&gt;
#log: std::string

#random_character_index(character_pool: const std::vector&lt;GameCharacter*&gt;&amp;, keys: const std::vector&lt;size_t&gt;&amp;): size_t const
#make_pair(vikings_queue: std::vector&lt;size_t&gt;&amp;, enemies_queue: std::vector&lt;size_t&gt;&amp;): size_t const
#clean_dead(character_pool: std::vector&lt;GameCharacter*&gt;&amp;): size_t
#cleanup(): size_t
#update_fighters(): size_t
#write_log_entry(viking_index: const size_t&amp;, enemy_index: const size_t&amp;): size_t
#write_log_entry(viking_index: const size_t&amp;, enemy_index: const size_t&amp;, stat_id: const size_t&amp;, is_hit: const size_t&amp;, is_wounded: const size_t&amp;, viking_strikes: const bool&amp;): size_t
#duel(viking_index: const size_t&amp;, enemy_index: const size_t&amp;): size_t
#fight_round(): size_t
#is_victory(): bool const
#is_defeat(): bool const
--
+Battle(data: const BattleTemplate&amp;, character_pool: const std::vector&lt;GameCharacter*&gt;&amp;)
/+~Battle()/
+what(): std::string const
+short_what(): std::string const
+log(): std::string const
+update(): size_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>960</x>
      <y>124</y>
      <w>194</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;950.0;10.0;950.0;300.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>844</x>
      <y>260</y>
      <w>312</w>
      <h>118</h>
    </coordinates>
    <panel_attributes>lt=-
m2=1
&lt; is spawned by</panel_attributes>
    <additional_attributes>10.0;570.0;1540.0;570.0;1540.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>694</x>
      <y>0</y>
      <w>58</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Color notation
--
--
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>694</x>
      <y>6</y>
      <w>58</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>Written, tested
bg=green
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>694</x>
      <y>12</y>
      <w>58</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>Written, not tested
bg=cyan
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>694</x>
      <y>18</y>
      <w>58</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>Partially written, not tested
bg=yellow
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>694</x>
      <y>24</y>
      <w>58</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>Not written, not tested
group=1</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
